/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */

//
// :sdk
//

allprojects {
    apply plugin: 'jacoco'

    jacoco {
        toolVersion '0.8.3'
    }
    tasks.withType(Test) {
        jacoco.includeNoLocationClasses = true
        jacoco.excludes = ['jdk.internal.*']
    }

    //noinspection GroovyAssignabilityCheck
    group rootProject.ext.groupId
    //noinspection GroovyAssignabilityCheck
    version rootProject.ext.versionName
}

subprojects {
    apply plugin: 'com.android.library'
    apply plugin: 'maven-publish'
    apply plugin: 'signing'

    def ext = rootProject.ext

    // Setup signing values.
    ext."signing.keyId" = ext.mavenSigningKeyId
    ext."signing.secretKeyRingFile" = ext.mavenSecretKeyPath
    ext."signing.password" = ext.mavenPublicKeyPassword

    ext.sdkName = 'appcenter.android'

    android {

        defaultConfig {
            consumerProguardFiles 'proguard-rules.pro'

            buildConfigField 'int', "MIN_SDK_VERSION", "${ext.minSdkVersion}"
            buildConfigField 'int', "TARGET_SDK_VERSION", "${ext.targetSdkVersion}"
            buildConfigField 'String', 'VERSION_NAME', "\"${ext.versionName}\""
        }

        buildTypes {
            release {
                buildConfigField 'String', "SDK_NAME", "\"${ext.sdkName}\""
                minifyEnabled false
            }
            debug {
                buildConfigField 'String', "SDK_NAME", "\"${ext.sdkName}\""
                testCoverageEnabled true
            }
        }

        testOptions {
            unitTests {
                all {
                    jvmArgs '-noverify', '-Djdk.attach.allowAttachSelf=true', '-Djdk.module.illegalAccess.silent=true'
                }
                returnDefaultValues = true
            }
        }

        lintOptions {
            explainIssues true
            textReport true
        }
    }

    configurations {
        javadocDeps
    }

    dependencies {
        compileOnly "androidx.annotation:annotation:${ext.annotationVersion}"
        javadocDeps "androidx.annotation:annotation:${ext.annotationVersion}"
        configurations.all {
            resolutionStrategy {
                force "androidx.annotation:annotation:${ext.annotationVersion}"
            }
        }

        testImplementation 'org.powermock:powermock-api-mockito2:2.0.9'
        testImplementation 'org.powermock:powermock-module-junit4:2.0.9'
        testImplementation 'org.powermock:powermock-module-junit4-rule-agent:2.0.9'
        testImplementation 'org.powermock:powermock-classloading-xstream:2.0.9'
        testImplementation "androidx.annotation:annotation:${ext.annotationVersion}"
        testImplementation project(':test')

        androidTestImplementation 'com.crittercism.dexmaker:dexmaker-dx:1.4'
        androidTestImplementation 'com.crittercism.dexmaker:dexmaker-mockito:1.4'
        androidTestImplementation 'androidx.test:core:1.4.0'
        androidTestImplementation 'androidx.test:rules:1.4.0'
        androidTestImplementation 'androidx.test:runner:1.4.0'
        androidTestImplementation ("androidx.annotation:annotation:${ext.annotationVersion}") {
            force = true
        }
        androidTestImplementation project(':test')
    }

    task coverageReport(type: JacocoReport, dependsOn: ['createDebugCoverageReport', 'testDebugUnitTest']) {
        reports {
            xml.required = true
            html.required = true
        }

        def fileFilter = ['**/R.class', '**/R$*.class', '**/BuildConfig.*', '**/Manifest*.*', '**/*Test*.*', 'android/**/*.*']
        sourceDirectories.from = files(["$projectDir/src/main/java"])
        classDirectories.from = files([
                fileTree(dir: "$buildDir/intermediates/javac/debug/classes", excludes: fileFilter)
        ])
        executionData.from = fileTree(dir: buildDir, includes: [
                'jacoco/testDebugUnitTest.exec',
                'outputs/code_coverage/debugAndroidTest/connected/*coverage.ec'
        ])

        /* Exclude coverage report result for appcenter-distribute-play module from the main coverage report. */
        if ("$projectDir".contains('appcenter-distribute-play')) {
            executionData.from = []
            classDirectories.from = []
            sourceDirectories.from = []
        }
    }

    task sourcesJar(type: Jar) {
        afterEvaluate {
            from android.sourceSets.main.java.srcDirs
            classifier = 'sources'
        }
    }

    task javadoc(type: Javadoc) {
        afterEvaluate {
            source = android.sourceSets.main.java.srcDirs
            classpath += configurations.javadocDeps
            configurations.api.dependencies.withType(ProjectDependency).dependencyProject.buildDir.each { dir -> classpath += files("${dir}/intermediates/classes/release") }
            //noinspection GroovyAssignabilityCheck
            classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
            android.libraryVariants.all { variant ->
                if (variant.name == 'release') {
                    // FIXME: API 'variant.getJavaCompile()' is obsolete and has been replaced with 'variant.getJavaCompileProvider()'.
                    owner.classpath += variant.javaCompile.classpath
                }
            }
            javadoc.dependsOn project.assembleRelease
        }
    }

    task javadocJar(type: Jar, dependsOn: javadoc) {
        classifier = 'javadoc'
        //noinspection GroovyAccessibility
        from javadoc.destinationDir
    }

    publishing {
        repositories {
            maven {
                url = uri("${System.env.BUILD_DIR}")
            }
        }

        afterEvaluate { project ->
            publications {
                release(MavenPublication) {
                    from components.release

                    artifact javadocJar
                    artifact sourcesJar

                    pom {

                        // Set base information about assemble.
                        packaging = 'aar'
                        name = project.name
                        description = project.description
                        url = ext.siteUrl

                        // Set identifiers of assemble.
                        groupId = ext.groupId
                        artifactId = project.name

                        // Set license information.
                        licenses {
                            license {
                                name = ext.licenseName
                                url = ext.licenseSite
                            }
                        }

                        // Set information about developers.
                        developers {
                            developer {
                                id = ext.developerId
                                name = ext.developerName
                                email = ext.developerEmail
                            }
                        }

                        // Set information about connection with developers.
                        scm {
                            connection = ext.gitUrl
                            developerConnection = ext.gitUrl
                            url = ext.siteUrl
                        }
                    }
                }
            }

            signing {
                required { gradle.taskGraph.hasTask("publish") }
                sign publishing.publications.release
            }
        }
    }
}

// :sdk:coverageReport which combines all coverageReports generated by sub projects
task coverageReport(type: JacocoReport, dependsOn: subprojects.coverageReport) {
    reports {
        xml.required = true
        html.required = true
    }

    def coverageReports = subprojects.coverageReport

    //noinspection GroovyAssignabilityCheck
    sourceDirectories.from = files(coverageReports.sourceDirectories)
    //noinspection GroovyAssignabilityCheck
    classDirectories.from = files(coverageReports.classDirectories)
    //noinspection GroovyAssignabilityCheck
    executionData.from = files(coverageReports.executionData)
}

apply plugin: 'com.github.kt3k.coveralls'

coveralls {
    jacocoReportPath "$buildDir/reports/jacoco/coverageReport/coverageReport.xml"
    sourceDirs = files(subprojects.coverageReport.sourceDirectories).files.absolutePath
}

tasks.coveralls.dependsOn coverageReport

task javadoc(type: Javadoc, dependsOn: subprojects.javadoc) {
    // Do nothing for :sdk but run the task for its children.
}

task clean(type: Delete) {
    delete project.buildDir
}
